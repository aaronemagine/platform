{% extends 'includes/main.twig' %}

{% block content %}

{% if not currentUser %}
    {% redirect 'index' %}
{% endif %}

{% set clientsList = craft.emstats.getClientsList() %}

{# Handle the form submission and set a session variable #}
{% if craft.app.request.isPost %}
    {% set submittedUserId = craft.app.request.getBodyParam('userId') %}
    {# Set a session flash variable to remember the selection #}
    {% do craft.app.session.setFlash('selectedUserId', submittedUserId) %}
{% endif %}

{# Retrieve the selected user ID from the session flash variable #}
{% set selectedUserId = craft.app.session.getFlash('selectedUserId', null, true) %}

{# Re-save the flash variable if it exists #}
{% if selectedUserId is not null %}
    {% do craft.app.session.setFlash('selectedUserId', selectedUserId) %}
{% endif %}
    
{% set selectedCompany = '' %}
{% set totalVisitsPerLanguage = selectedUserId ? craft.emstats.getTotalVisitsPerLanguage(selectedUserId) : null %}

{# If a user ID was selected, find the company name #}
{% if selectedUserId %}
    {% set selectedUser = craft.users().id(selectedUserId).one() %}
    {% if selectedUser %}
        {% set selectedCompany = selectedUser.getFieldValue('companyName') %}
        {% set totalEntries = craft.emstats.getTotalVisitsCount(selectedUserId) %}
        {% set totalVisitsPerLanguage = craft.emstats.getTotalVisitsPerLanguage(selectedUserId) %}
    {% endif %}
{% endif %}

{# -- set up the language map -- #}
{% set languageMap = craft.emstats.getLanguageMap %} 

{% set totalVisitsPerVenue = craft.emstats.getTotalVisitsPerVenue(selectedUserId) %}
{% set totalVisitsPerMovie = craft.emstats.getTotalVisitsPerMovie(selectedUserId) %}

{% set currentDateParam = craft.app.request.getParam('date') %}
{% set weekNavUrls = craft.emstats.getWeekNavigationUrls(currentDateParam) %}
{% set weeklyStats = craft.emstats.getWeeklyStats(currentDateParam, selectedUserId) %}

{% set lowercaseWeeklyStats = {} %}
{% for time, stats in weeklyStats %}
  {% set lowerStats = {} %}
  {% for lang, count in stats %}
    {% set lowerStats = lowerStats|merge({ (lang|lower): count }) %}
  {% endfor %}
  {% set lowercaseWeeklyStats = lowercaseWeeklyStats|merge({ (time): lowerStats }) %}
{% endfor %}

{% set monthParam = craft.app.request.getParam('month') %}
{% set monthNavUrls = craft.emstats.getMonthNavigationUrls(monthParam) %}
{% set monthlyStats = craft.emstats.calculateMonthlyStats(monthParam, selectedUserId) %}

{% set lowercaseMonthlyStats = {} %}
{% for time, stats in monthlyStats %}
  {% set lowerStats = {} %}
  {% for lang, count in stats %}
    {% set lowerStats = lowerStats|merge({ (lang|lower): count }) %}
  {% endfor %}
  {% set lowercaseMonthlyStats = lowercaseMonthlyStats|merge({ (time): lowerStats }) %}
{% endfor %}

{% set dayParam = craft.app.request.getParam('day') %}
{% set dayNavUrls = craft.emstats.getDayNavigationUrls(dayParam) %}
{% set dailyStats = craft.emstats.getTodayVisitsByTimeAndLanguage(dayParam, selectedUserId) %}

{% set lowercaseDailyStats = {} %}
{% for time, stats in dailyStats %}
  {% set lowerStats = {} %}
  {% for lang, count in stats %}
    {% set lowerStats = lowerStats|merge({ (lang|lower): count }) %}
  {% endfor %}
  {% set lowercaseDailyStats = lowercaseDailyStats|merge({ (time): lowerStats }) %}
{% endfor %}


<div class="flex min-h-screen">

    {% include 'includes/admin-sidebar.twig' %}

    {#-- Main Content Area --#}
    <div class="flex-grow w-full bg-grey-500 p-4">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
       
             <div class="p-4 sm:p-6 bg-gray-800 text-white border border-gray-700 rounded-lg shadow-2xl col-span-2">

                <form method="post" action="" class="mb-4 flex">
                    {{ csrfInput() }}

                    <div class="flex-grow pr-2 mr-4">
                        <select name="userId" id="clientSelect" class="w-full border-gray-500 py-2 px-4 rounded bg-gray-700">
                            <option value="">-- Select an Owner --</option>
                            {% for client in clientsList %}
                                <option value="{{ client.userId }}" {% if client.userId == selectedUserId %}selected{% endif %}>
                                    {{ client.companyName }} ({{ client.fullName }})
                                </option>
                            {% endfor %}
                        </select>
                    </div>

                    <button type="submit" class="flex-none w-1/4  bg-gray-500  hover:bg-gray-700 text-white py-2 px-4 rounded transition-colors">
                        Select
                    </button>
                </form>

                <div class="grid grid-rows-3 gap-4">
                    {% if selectedCompany %}
                        <div class="row-span-1">
                            <h1 class="text-xl font-bold mb-2">Stats for {{ selectedCompany }}</h1>
                        </div>
                    {% endif %}
                    {% if totalEntries is defined and selectedCompany %}
                        <div class="row-span-1">
                            <h2 class="text-l font-bold mb-2">Total Plays: {{ totalEntries }}</h2>
                        </div>
                    {% endif %}

                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem;">

                        {% if totalVisitsPerLanguage is defined and selectedCompany %}
                            <div class="col-span-1">
                                <h3 class="text-l font-bold mb-2">Plays By Language:</h3>
                                <ul class="list-disc pl-5">
                                    {% for code, total in totalVisitsPerLanguage %}
                                        {% set languageName = languageMap[code].name ?? code %}
                                        <li>{{ languageName }}: {{ total }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}

                        {% if totalVisitsPerVenue is defined and selectedCompany %}
                            <div class="col-span-1">
                                <h3 class="text-l font-bold mb-2">Plays By Venue:</h3>
                                <ul class="list-disc pl-5">
                                    {% for venueName, total in totalVisitsPerVenue %}
                                        <li>{{ venueName }}: {{ total }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}

                        {% if totalVisitsPerMovie is defined and selectedCompany %}
                            <div class="col-span-1">
                                <h3 class="text-l font-bold mb-2">Plays By Experience:</h3>
                                <ul class="list-disc pl-5">
                                    {% for movieName, total in totalVisitsPerMovie %}
                                        <li>{{ movieName }}: {{ total }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}
                    </div>

                </div>
            </div>




            <div class="p-4 border rounded-lg shadow-2xl col-span-1 border-gray-700 sm:p-6 bg-gray-800 text-white">
                <div class="flex">
                    <div class="w-1/3"></div>
                    <div class="w-2/3">
                        <canvas id="languagePieChart"></canvas>
                    </div>
                </div>
            </div>

         </div>

   
         <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4 mt-4 p-4 border rounded-lg shadow-sm  border-gray-700 bg-gray-800 text-white">



            <div class="p-4">
                <!-- Tab Headers -->
                <div class="flex border-b">
                    <button class="tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="fullGraph">Plays This Week</button>
                    <button class="tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="byLanguages">By Language</button>
                </div>

                <!-- Tab Content -->
                <div id="fullGraph" class="tab-content p-4 hidden">
                    {% if currentDateParam %}
                        {% set mondayOfWeek = currentDateParam|date('Y-m-d')|date_modify('Monday this week') %}
                        <h3 class="text-l mb-2">Week Of {{ mondayOfWeek|date('F jS, Y') }}</h3>
                    {% endif %}
                    <canvas id="visitsThisWeekChart"></canvas> 
                    <div class="flex justify-between pt-1">
                        <a href="{{ weekNavUrls.prevWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Prev Week
                        </a>
                        <a href="{{ weekNavUrls.nextWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Next Week
                        </a>
                    </div>
                </div>
                <div id="byLanguages" class="tab-content p-4 hidden">
                    {% if currentDateParam %}
                        {% set mondayOfWeek = currentDateParam|date('Y-m-d')|date_modify('Monday this week') %}
                        <h3 class="text-l mb-2">Week Of {{ mondayOfWeek|date('F jS, Y') }}</h3>
                    {% endif %}
                    <canvas id="visitsThisWeekLanguageChart"></canvas>
                    <div class="flex justify-between pt-1">
                        <a href="{{ weekNavUrls.prevWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Prev Week
                        </a>
                        <a href="{{ weekNavUrls.nextWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Next Week
                        </a>
                    </div>
                </div>
            </div>

            <div class="p-4">
                <!-- Tab Headers -->
                <div class="flex border-b">
                    <button class="month-tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="visitsThisMonth">Plays This Month</button>
                    <button class="month-tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="monthByLanguage">By Language</button>
                </div>

                <!-- Tab Content -->
                <div id="visitsThisMonth" class="month-tab-content p-4 hidden">
                    {% if monthParam %}
                        {% set monthDate = monthParam|date('Y-m-d') %}
                        {% set monthName = monthDate|date('F, Y') %}
                        <h3 class="text-l mb-2">Plays in {{ monthName }}</h3>
                    {% endif %}

                    <canvas id="totalVisitsLineChartMonth"></canvas>
                
                    <div class="flex justify-between pt-1">
                        <a href="{{ monthNavUrls.prevMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Prev Month
                        </a>
                        <a href="{{ monthNavUrls.nextMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Next Month
                        </a>
                    </div>
                </div>
                <div id="monthByLanguage" class="month-tab-content p-4 hidden">
                    {% if monthParam %}
                        {% set monthDate = monthParam|date('Y-m-d') %}
                        {% set monthName = monthDate|date('F, Y') %}
                        <h3 class="text-l mb-2">Plays in {{ monthName }}</h3>
                    {% endif %}

                    <canvas id="visitsByLanguageBarChartMonth"></canvas>

                    <div class="flex justify-between pt-1">
                        <a href="{{ monthNavUrls.prevMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Prev Month
                        </a>
                        <a href="{{ monthNavUrls.nextMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Next Month
                        </a>
                    </div>
                </div>
            </div>

        </div>

        <div class="grid grid-cols-1 gap-4 mt-4 p-4 border rounded-lg shadow-sm  border-gray-700 bg-gray-800 text-white">
            <!-- Card 2 -->
            <div>
                {% set currentDayParam = craft.app.request.getParam('day') %}
                {% set displayDay = currentDayParam ? currentDayParam|date('l, jS F, Y') : 'Today' %}

                <h3 class="text-xl font-bold mb-2">Plays Per Hour ({{ displayDay }})</h3>
                <canvas id="barDayChart"></canvas>

                <div class="flex justify-between pt-1">
                    <a href="{{ dayNavUrls.prevDayUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">Previous Day</a>
                    <a href="{{ dayNavUrls.nextDayUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">Next Day</a>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {

    // Check if languageMap is defined
    const languageMap = {{ languageMap|json_encode|raw }};
    if (typeof languageMap === 'undefined') {
        console.error('languageMap is not defined');
        return; // Stop execution if languageMap is not defined
    }

    var totalVisitsPerLanguage = {{ totalVisitsPerLanguage is not null ? totalVisitsPerLanguage|json_encode|raw : 'null' }};

    if (typeof totalVisitsPerLanguage !== 'undefined') {
    // totalVisitsPerLanguage is defined

        // Draw 'languagePieChart' pie chart
        const totalVisitsPerLanguage = JSON.parse('{{ totalVisitsPerLanguage|json_encode|raw }}');
        const labels = [];
        const data = [];
        const colors = [];

        // Loop through totalVisitsPerLanguage and populate labels, data, and colors
        Object.keys(totalVisitsPerLanguage).forEach(code => {
            if (languageMap[code]) { // Check if the language code exists in languageMap
                labels.push(languageMap[code].name);
                data.push(totalVisitsPerLanguage[code]);
                colors.push(languageMap[code].hex);
            } else {
                console.error('Language code ' + code + ' does not exist in languageMap');
            }
        });

        // Creating the pie chart
        const pieCtx = document.getElementById('languagePieChart').getContext('2d');
        new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{ data: data, backgroundColor: colors, borderWidth: 0 }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: true, position: 'left' }
                }
            }
        });

    } else {
        // totalVisitsPerLanguage is not defined
        console.log("totalVisitsPerLanguage is not defined");
    }


    const weeklyStats = JSON.parse('{{ lowercaseWeeklyStats|json_encode|raw }}');
    const totalVisitsPerDay = weeklyStats.totalVisitsPerDay;
    const dayLabels = Object.keys(totalVisitsPerDay);

    // Line Chart Dataset
    const lineChartDataset = {
        label: 'Total Plays',
        data: dayLabels.map(day => totalVisitsPerDay[day]),
        backgroundColor: '#27272a',
        borderColor: 'white',
        borderWidth: 2,
        fill: true
    };

    // Initialize Line Chart
    const lineChartCtx = document.getElementById('visitsThisWeekChart').getContext('2d');
    new Chart(lineChartCtx, {
        type: 'line',
        data: {
            labels: dayLabels,
            datasets: [lineChartDataset]
        },
        options: {
            scales: {
                y: { beginAtZero: true }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });

    const languageDayData = weeklyStats.languageDayData;

    // Initialize datasets array for Bar Chart
    let barChartDatasets = [];

    Object.keys(languageMap).forEach(languageCode => {
        let languageData = dayLabels.map(day => languageDayData[day][languageCode] || 0);
        
        const totalVisitsForLanguage = languageData.reduce((acc, cur) => acc + cur, 0);
        if (totalVisitsForLanguage > 0) {
            barChartDatasets.push({
                label: languageMap[languageCode].name,
                data: languageData,
                backgroundColor: languageMap[languageCode].hex,
                borderColor: languageMap[languageCode].hex,
                borderWidth: 1,
                stack: 'stacked'
            });
        }
    });

    // Initialize Stacked Bar Chart
    const barChartCtx = document.getElementById('visitsThisWeekLanguageChart').getContext('2d');
    new Chart(barChartCtx, {
        type: 'bar',
        data: {
            labels: dayLabels,
            datasets: barChartDatasets
        },
        options: {
            indexAxis: 'x',
            scales: {
                x: { stacked: true },
                y: { stacked: true }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom'
                }
            }
        }
    });

    const monthlyStatsData = JSON.parse('{{ lowercaseMonthlyStats|json_encode|raw }}');

    const totalVisitsPerWeek = monthlyStatsData.totalVisitsPerWeek;
    const weekLabels = monthlyStatsData.weekLabels;

    // Line Chart Dataset for Total Visits Per Week
    const lineChartDatasetMonth = {
        label: 'Total Visits',
        data: weekLabels.map(week => totalVisitsPerWeek[week]),
        backgroundColor: '#27272a',
        borderColor: 'white',
        borderWidth: 2,
        fill: true
    };

    // Initialize Line Chart
    const lineChartCtxMonth = document.getElementById('totalVisitsLineChartMonth').getContext('2d');
    new Chart(lineChartCtxMonth, {
        type: 'line',
        data: {
            labels: weekLabels,
            datasets: [lineChartDatasetMonth]
        },
        options: {
            scales: {
                y: { beginAtZero: true }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });

    const weeklyLanguageVisits = monthlyStatsData.weeklyLanguageVisits;


    // Initialize datasets array for Bar Chart
    let barChartDatasetsMonth = [];

    Object.keys(languageMap).forEach(languageCode => {
        let languageData = weekLabels.map(weekLabel => weeklyLanguageVisits[languageCode][weekLabel] || 0);
        
        const totalVisitsForLanguage = languageData.reduce((acc, cur) => acc + cur, 0);
        if (totalVisitsForLanguage > 0) {
            barChartDatasetsMonth.push({
                label: languageMap[languageCode].name,
                data: languageData,
                backgroundColor: languageMap[languageCode].hex,
                borderColor: languageMap[languageCode].hex,
                borderWidth: 1,
                stack: 'stacked'
            });
        }
    });

    // Initialize Stacked Bar Chart
    const barChartCtxMonth = document.getElementById('visitsByLanguageBarChartMonth').getContext('2d');
    new Chart(barChartCtxMonth, {
        type: 'bar',
        data: {
            labels: weekLabels,
            datasets: barChartDatasetsMonth
        },
        options: {
            indexAxis: 'x',
            scales: {
                x: { stacked: true },
                y: { stacked: true }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom'
                }
            }
        }
    });




    // // Draw 'weeklyVisitsThisMonthChart' graph
    // const monthlyStatsData = JSON.parse('{{ monthlyStats|json_encode|raw }}');
    // const weeklyCtx = document.getElementById('weeklyVisitsThisMonthChart').getContext('2d');
    // const weekLabels = monthlyStatsData.weekLabels;
    // const weeklyLanguageVisits = monthlyStatsData.weeklyLanguageVisits;
    // const totalVisitsPerWeek = monthlyStatsData.totalVisitsPerWeek;

    // // Initialize datasets array
    // datasets = [];

    // // Add the line graph dataset for total visits per week
    // datasets.push({
    //     type: 'line', // Specifies a line dataset for the total visits
    //     label: 'Total Plays',
    //     data: Object.values(totalVisitsPerWeek), // Use the values from the totalVisitsPerWeek object
    //     backgroundColor: 'rgba(255, 255, 255, 0)', 
    //     borderColor: 'white',
    //     borderWidth: 2,
    //     fill: false
    // });

    // // Add bar chart datasets for each language
    // Object.keys(weeklyLanguageVisits).forEach(languageCode => {
    //     let languageData = weekLabels.map(weekLabel => weeklyLanguageVisits[languageCode][weekLabel] || 0);

    //     const totalVisitsForLanguage = languageData.reduce((acc, cur) => acc + cur, 0);
    //     if (totalVisitsForLanguage > 0) {
    //         datasets.push({
    //             label: languageMap[languageCode].name, // Get the language name
    //             data: languageData, // Language-specific visit counts
    //             backgroundColor: languageMap[languageCode].hex, // Get the hex color
    //             borderColor: languageMap[languageCode].hex,
    //             borderWidth: 1,
    //             stack: 'stacked' // This is needed to stack bars on top of each other
    //         });
    //     }
    // });

    // // Create the Chart instance
    // new Chart(weeklyCtx, {
    //     type: 'bar',
    //     data: {
    //         labels: weekLabels,
    //         datasets: datasets
    //     },
    //     options: {
    //         indexAxis: 'x',
    //         scales: {
    //             x: { stacked: true },
    //             y: { stacked: true }
    //         },
    //         plugins: {
    //             legend: {
    //                 display: true,
    //                 position: 'bottom'
    //             }
    //         }
    //     }
    // });

    const dailyStats = JSON.parse('{{ lowercaseDailyStats|json_encode|raw }}');
    const allLabels = Object.keys(dailyStats);

    const timeSlots = [];
    for (let hour = 8; hour <= 20; hour++) {
        timeSlots.push(`${hour.toString().padStart(2, '0')}:00`);
        timeSlots.push(`${hour.toString().padStart(2, '0')}:30`);
    }

    // Filter labels for 8 AM to 8 PM
    const filteredLabels = allLabels.filter(label => {
        const hour = parseInt(label.split(':')[0]);
        return hour >= 8 && hour <= 20; // Adjust the range as needed
    });
    
    datasets = [];

    Object.keys(languageMap).forEach(function(languageCode) {
        const languageInfo = languageMap[languageCode];
        const color = languageInfo.hex;
        const dataPoints = timeSlots.map(function(timeSlot) {
            return dailyStats[timeSlot] && dailyStats[timeSlot][languageCode] ? dailyStats[timeSlot][languageCode] : 0;
        });


        // Check if the language has any data
        if (dataPoints.some(point => point > 0)) {
            datasets.push({
                label: languageInfo.name,
                backgroundColor: color,
                data: dataPoints
            });
        }
    });

    const ctx = document.getElementById('barDayChart').getContext('2d');
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: timeSlots,
            datasets: datasets
        },
        options: {
            scales: {
                x: { stacked: true },
                y: { stacked: true }
            },
            plugins: {
                legend: {
                    display: datasets.length > 1, // Display legend only if more than one language
                    position: 'bottom'
                }
            }
        }
    });



    const tabs = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Remove active state from all tabs
            tabs.forEach(t => t.classList.remove('text-blue-600', 'border-blue-600'));
            // Hide all tab contents
            tabContents.forEach(content => content.classList.add('hidden'));

            // Set active state on clicked tab
            tab.classList.add('text-blue-600', 'border-blue-600');
            // Show the corresponding tab content
            const activeTabContent = document.getElementById(tab.getAttribute('data-target'));
            activeTabContent.classList.remove('hidden');
        });
    });

    // Activate the first tab by default
    if (tabs.length > 0) {
        tabs[0].click();
    }

    const monthTabs = document.querySelectorAll('.month-tab-button');
    const monthTabContents = document.querySelectorAll('.month-tab-content');

    monthTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Remove active state from all tabs
            monthTabs.forEach(t => t.classList.remove('text-blue-600', 'border-blue-600'));
            // Hide all tab contents
            monthTabContents.forEach(content => content.classList.add('hidden'));

            // Set active state on clicked tab
            tab.classList.add('text-blue-600', 'border-blue-600');
            // Show the corresponding tab content
            const activeTabContent = document.getElementById(tab.getAttribute('data-target'));
            activeTabContent.classList.remove('hidden');
        });
    });

    // Activate the first tab by default
    if (monthTabs.length > 0) {
        monthTabs[0].click();
    }

});




</script>

{% endblock %}




