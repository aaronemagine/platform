{% cache %}
{% extends 'includes/main.twig' %}
{% endcache %}

{% block content %}

{% if not currentUser %}
    {% redirect 'index' %}
{% endif %}

{% set selectedUserId = currentUser.id %}

{% if selectedUserId %}
    {% set monthlyStats = craft.emstats.calculateMonthlyStats(craft.app.request.getParam('month'), selectedUserId) %}
    {% set monthNavUrls = craft.emstats.getMonthNavigationUrls(craft.app.request.getParam('month')) %}

    {% set totalMonthlyVisits = 0 %}
    {% if monthlyStats.totalVisitsPerWeek is defined %}
        {% for week, visits in monthlyStats.totalVisitsPerWeek %}
            {% set totalMonthlyVisits = totalMonthlyVisits + visits %}
        {% endfor %}
    {% endif %}
{% endif %}

{% set languageMap = craft.emstats.getLanguageMap %}
{% set languages = languageMap|keys %}

<div class="flex min-h-screen">

    <div class="flex-grow w-full bg-grey-500 p-4">
        <div class="row-span-1">
            {% if craft.app.request.getParam('month') %}
                {% set monthDate = craft.app.request.getParam('month')|date('Y-m') %}
                {% set monthName = monthDate|date('F, Y') %}
                <h1 class="text-xl font-bold mb-2 text-white">{{ 'Visits in'|t }} {{ monthName }}</h1>
            {% else %}
                <h1 class="text-xl font-bold mb-2 text-white">
                    {{ 'Visits this month'|t }} ({{ now|date('F Y') }})
                </h1>
            {% endif %}
        </div>
        <div class="grid grid-cols-3 gap-4 mt-4 p-4 border rounded-lg shadow-sm border-gray-700 bg-gray-800 text-white">
            <div class="col-span-1">
       
                <table class="w-full bg-gray-800 border border-gray-700">
                    <thead>
                        <tr>
                            <th class="w-2/3 px-4 py-2 border-b border-gray-700 bg-gray-700 text-left text-sm font-medium text-gray-300 uppercase tracking-wider">{{'Week'|t }}</th>
                            <th class="w-1/3 px-4 py-2 border-b border-gray-700 bg-gray-700 text-right text-sm font-medium text-gray-300 uppercase tracking-wider">{{'Visits'|t }}</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for week, visits in monthlyStats.totalVisitsPerWeek %}
                        <tr class="{{ loop.index0 is even ? 'bg-gray-800' : 'bg-gray-700' }}">
                            <td class="w-2/3 px-4 py-2 border-b border-gray-700 text-sm text-gray-300">{{ week }}</td>
                            <td class="w-1/3 px-4 py-2 border-b border-gray-700 text-sm text-gray-300 text-right">{{ visits }}</td>
                        </tr>
                        {% endfor %}
                        <tr>
                            <td class="w-2/3 px-4 py-2 border-b border-gray-700 text-sm text-gray-900 bg-gray-400 ">{{ 'Total visits'|t }}:</td>
                            <td class="w-1/3 px-4 py-2 border-t text-right border-gray-700 text-sm text-gray-900 bg-gray-400">{{ totalMonthlyVisits }}</td>
                        </tr>
                    </tbody>
                </table>
    
            </div>
            <div class="col-span-2">
                <div class="p-4 h-full">
                    <canvas id="totalVisitsLineChartMonth"></canvas>
                </div>    
            </div>
        </div>
        <div class="flex justify-between pt-4">
            <a href="{{ monthNavUrls.prevMonthUrl  }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Prev month'|t }}</a>
            <a href="{{ monthNavUrls.nextMonthUrl  }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Next month'|t }}</a>
        </div>
        <div class="grid grid-cols-3 gap-4 mt-4 p-4 border rounded-lg shadow-sm border-gray-700 bg-gray-800 text-white">
            <div class="col-span-1">
       
                <table class="w-full bg-gray-800 border border-gray-700">
                    <thead>
                        <tr>
                            <th class="w-2/3 px-4 py-2 border-b border-gray-700 bg-gray-700 text-left text-sm font-medium text-gray-300 uppercase tracking-wider">{{'Week'|t }}</th>
                            <th class="w-1/3 px-4 py-2 border-b border-gray-700 bg-gray-700 text-right text-sm font-medium text-gray-300 uppercase tracking-wider">{{'Visits'|t }}</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for week, visits in monthlyStats.totalVisitsPerWeek %}
                        <tr class="{{ loop.index0 is even ? 'bg-gray-800' : 'bg-gray-700' }}">
                            <td class="w-2/3 px-4 py-2 border-b border-gray-700 text-sm text-gray-300">{{ week }}</td>
                            <td class="w-1/3 px-4 py-2 border-b border-gray-700 text-sm text-gray-300 text-right">{{ visits }}</td>
                        </tr>
                        {% endfor %}
                        <tr>
                            <td class="w-2/3 px-4 py-2 border-b border-gray-700 text-sm text-gray-900 bg-gray-400 ">{{ 'Total visits'|t }}:</td>
                            <td class="w-1/3 px-4 py-2 border-t text-right border-gray-700 text-sm text-gray-900 bg-gray-400">{{ totalMonthlyVisits }}</td>
                        </tr>
                    </tbody>
                </table>
    
            </div>
            <div class="col-span-2">
                <div class="p-4 h-full">
                    <canvas id="visitsByLanguageBarChartMonth"></canvas>
                </div>    
            </div>
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
    const languageMap = {{ languageMap|json_encode|raw }};
    if (typeof languageMap === 'undefined') {
        console.error('languageMap is not defined');
        return;
    }

    const monthlyStatsData = JSON.parse('{{ monthlyStats|json_encode|raw }}');
    const totalVisitsPerWeek = monthlyStatsData.totalVisitsPerWeek;
    const weekLabels = monthlyStatsData.weekLabels;

    const lineChartDatasetMonth = {
        label: 'Total Visits',
        data: weekLabels.map(week => totalVisitsPerWeek[week]),
        backgroundColor: '#27272a',
        borderColor: 'white',
        borderWidth: 2,
        fill: true
    };

    const lineChartCtxMonth = document.getElementById('totalVisitsLineChartMonth').getContext('2d');
    new Chart(lineChartCtxMonth, {
        type: 'line',
        data: {
            labels: weekLabels,
            datasets: [lineChartDatasetMonth]
        },
        options: {
            scales: {
                x: {
                    ticks: {
                        color: 'white' // Change x-axis labels to white
                    }
                },
                y: { beginAtZero: true,
                    ticks: {
                        color: 'white' // Change x-axis labels to white
                    }
                }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });

    const weeklyLanguageVisits = monthlyStatsData.weeklyLanguageVisits;
    let barChartDatasetsMonth = [];

    Object.keys(languageMap).forEach(languageCode => {
        let languageData = weekLabels.map(weekLabel => weeklyLanguageVisits[languageCode][weekLabel] || 0);
        const totalVisitsForLanguage = languageData.reduce((acc, cur) => acc + cur, 0);
        if (totalVisitsForLanguage > 0) {
            barChartDatasetsMonth.push({
                label: languageMap[languageCode].name,
                data: languageData,
                backgroundColor: languageMap[languageCode].hex,
                borderColor: languageMap[languageCode].hex,
                borderWidth: 1,
                stack: 'stacked'
            });
        }
    });

    const barChartCtxMonth = document.getElementById('visitsByLanguageBarChartMonth').getContext('2d');
    new Chart(barChartCtxMonth, {
        type: 'bar',
        data: {
            labels: weekLabels,
            datasets: barChartDatasetsMonth
        },
        options: {
            indexAxis: 'x',
            scales: {
                x: { stacked: true,
                ticks: {
                        color: 'white' // Change x-axis labels to white
                    } 
                },
                y: { stacked: true,
                    ticks: {
                        color: 'white' // Change x-axis labels to white
                    } 
                }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom',
                    labels: {
                        color: 'white' // Change legend labels color to white
                    }
                }
            }
        }
    });
});
</script>

{% endblock %}
