{% cache %}
{% extends 'includes/main.twig' %}
{% endcache %}

{% block content %}

{% if not currentUser %}
    {% redirect 'index' %}
{% endif %}

{% set selectedUserId = currentUser.id %}

{% dump(selectedUserId) %} 

{% if selectedUserId %}
    {% do craft.app.session.set('selectedUserId', selectedUserId) %}
    {% set selectedUser = craft.users().id(selectedUserId).one() %}
    {% if selectedUser %}
        {% set selectedCompany = selectedUser.getFieldValue('companyName') %}
        {% set totalEntries = craft.emstats.getTotalVisitsCount(selectedUserId) %}
        {% set totalVisitsPerLanguage = craft.emstats.getTotalVisitsPerLanguage(selectedUserId) %}
        {# {% set totalVisitsPerVenue = craft.emstats.getTotalVisitsPerVenue(selectedUserId) %}
        {% set totalVisitsPerMovie = craft.emstats.getTotalVisitsPerMovie(selectedUserId) %} #}
        {% set weeklyStats = craft.emstats.getWeeklyStats(craft.app.request.getParam('date'), selectedUserId) %}
        {% set monthlyStats = craft.emstats.calculateMonthlyStats(craft.app.request.getParam('month'), selectedUserId) %}
        {% set dailyStats = craft.emstats.getTodayVisitsByTimeAndLanguage(craft.app.request.getParam('day'), selectedUserId) %}
    {% endif %}
{% endif %}

{% set languageMap = craft.emstats.getLanguageMap %}
{% set languages = languageMap|keys %}

{% set weekNavUrls = craft.emstats.getWeekNavigationUrls(craft.app.request.getParam('date')) %}
{% set monthNavUrls = craft.emstats.getMonthNavigationUrls(craft.app.request.getParam('month')) %}
{% set dayNavUrls = craft.emstats.getDayNavigationUrls(craft.app.request.getParam('day')) %}

{% set lowercaseWeeklyStats = {} %}
{% if weeklyStats is defined %}
    {% for time, stats in weeklyStats %}
        {% set lowerStats = {} %}
        {% for lang, count in stats %}
            {% set lowerStats = lowerStats|merge({ (lang|lower): count }) %}
        {% endfor %}
        {% set lowercaseWeeklyStats = lowercaseWeeklyStats|merge({ (time): lowerStats }) %}
    {% endfor %}
{% endif %}

{% set totalWeeklyVisits = 0 %}
{% if weeklyStats.totalVisitsPerDay is defined %}
    {% for day, visits in weeklyStats.totalVisitsPerDay %}
        {% set totalWeeklyVisits = totalWeeklyVisits + visits %}
    {% endfor %}
{% endif %}

{% set totalMonthlyVisits = 0 %}
{% if monthlyStats.totalVisitsPerWeek is defined %}
    {% for week, visits in monthlyStats.totalVisitsPerWeek %}
        {% set totalMonthlyVisits = totalMonthlyVisits + visits %}
    {% endfor %}
{% endif %}

{% set totalDailyVisits = 0 %}


{% set lowercaseDailyStats = {} %}
{% if dailyStats is defined %}
    {% for time, stats in dailyStats %}
        {% set lowerStats = {} %}
        {% for lang, count in stats %}
            {% set lowerStats = lowerStats|merge({ (lang|lower): count }) %}
            {% set totalDailyVisits = totalDailyVisits + count %}
        {% endfor %}
        {% set lowercaseDailyStats = lowercaseDailyStats|merge({ (time): lowerStats }) %}
    {% endfor %}
{% endif %}


<div class="flex min-h-screen">
{% cache %}
    {% include 'includes/sidebar.twig' %}
{% endcache %}

    <div class="flex-grow w-full bg-grey-500 p-4">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div class="p-4 sm:p-6 bg-gray-800 text-white border border-gray-700 rounded-lg shadow-2xl col-span-2">
                <div class="grid grid-rows-3 gap-4">
                    {% if selectedCompany %}
                        <div class="row-span-1">
                            <h1 class="text-xl font-bold mb-2">{{ 'Stats for'|t }} {{ selectedCompany }}</h1>
                        </div>
                        <div class="row-span-1">
                            <h2 class="text-l font-bold mb-2">{{ 'Total visits'|t }}: {{ totalEntries }}</h2>
                        </div>
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem;">
                            <div class="col-span-1">
                                <h3 class="text-l font-bold mb-2">{{ 'Visits by language'|t }}:</h3>
                                <ul class="list-disc pl-5">
                                    {% for code, total in totalVisitsPerLanguage %}
                                        {% set languageName = languageMap[code].name ?? code %}
                                        <li>{{ languageName }}: {{ total }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                            {# <div class="col-span-1">
                                <h3 class="text-l font-bold mb-2">{{ 'Visits by venue'|t }}:</h3>
                                <ul class="list-disc pl-5">
                                   {% for venueName, total in totalVisitsPerVenue %}
                                        <li>{{ venueName }}: {{ total }}</li>
                                    {% endfor %} 
                                </ul>
                            </div>
                            <div class="col-span-1">
                                <h3 class="text-l font-bold mb-2">{{ 'Visits by experience'|t }}:</h3>
                                <ul class="list-disc pl-5">
                                    {% for movieName, total in totalVisitsPerMovie %}
                                        <li>{{ movieName }}: {{ total }}</li>
                                    {% endfor %} 
                                </ul>
                            </div> #}
                        </div>
                    {% endif %}
                </div>
            </div>
            <div class="p-4 border rounded-lg shadow-2xl col-span-1 border-gray-700 sm:p-6 bg-gray-800 text-white">
                <div class="flex">
                    <div class="w-1/3"></div>
                    <div class="w-2/3">
                        <canvas id="languagePieChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4 mt-4 p-4 border rounded-lg shadow-sm border-gray-700 bg-gray-800 text-white">
            <div class="p-4">
                <div class="flex border-b">
                    <button class="tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="fullGraph">{{ 'Visits this week'|t }} ({{ totalWeeklyVisits }})</button>
                    <button class="tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="byLanguages">{{ 'By language'|t }}</button>
                </div>
                <div id="fullGraph" class="tab-content p-4 hidden">
                    {% if craft.app.request.getParam('date') %}
                        {% set mondayOfWeek = craft.app.request.getParam('date')|date('Y-m-d')|date_modify('Monday this week') %}
                        <h3 class="text-l mb-2">{{ 'Week of'|t }} {{ mondayOfWeek|date('F jS, Y') }}</h3>
                    {% endif %}
                    <canvas id="visitsThisWeekChart"></canvas>
                    <div class="flex justify-between pt-1">
                        <a href="{{ weekNavUrls.prevWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Prev week'|t }}</a>
                        <a href="{{ weekNavUrls.nextWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Next week'|t }}</a>
                    </div>
                </div>
                <div id="byLanguages" class="tab-content p-4 hidden">
                    {% if craft.app.request.getParam('date') %}
                        {% set mondayOfWeek = craft.app.request.getParam('date')|date('Y-m-d')|date_modify('Monday this week') %}
                        <h3 class="text-l mb-2">{{ 'Week of'|t }} {{ mondayOfWeek|date('F jS, Y') }}</h3>
                    {% endif %}
                    <canvas id="visitsThisWeekLanguageChart"></canvas>
                    <div class="flex justify-between pt-1">
                        <a href="{{ weekNavUrls.prevWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Prev week'|t }}</a>
                        <a href="{{ weekNavUrls.nextWeekUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Next week'|t }}</a>
                    </div>
                </div>
            </div>
            <div class="p-4">
                <div class="flex border-b">
                    <button class="month-tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="visitsThisMonth">{{ 'Visits this month'|t }} ({{ totalMonthlyVisits }})</button>
                    <button class="month-tab-button py-2 px-4 text-l font-medium text-gray-600 border-b-2 focus:outline-none" data-target="monthByLanguage">{{ 'By language'|t }}</button>
                </div>
                <div id="visitsThisMonth" class="month-tab-content p-4 hidden">
                    {% if craft.app.request.getParam('month') %}
                        {% set monthDate = craft.app.request.getParam('month')|date('Y-m-d') %}
                        {% set monthName = monthDate|date('F, Y') %}
                        <h3 class="text-l mb-2">{{ 'Plays in'|t }} {{ monthName }}</h3>
                    {% endif %}
                    <canvas id="totalVisitsLineChartMonth"></canvas>
                    <div class="flex justify-between pt-1">
                        <a href="{{ monthNavUrls.prevMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Prev month'|t }}</a>
                        <a href="{{ monthNavUrls.nextMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Next month'|t }}</a>
                    </div>
                </div>
                <div id="monthByLanguage" class="month-tab-content p-4 hidden">
                    {% if craft.app.request.getParam('month') %}
                        {% set monthDate = craft.app.request.getParam('month')|date('Y-m-d') %}
                        {% set monthName = monthDate|date('F, Y') %}
                        <h3 class="text-l mb-2">{{ 'Visits in'|t }} {{ monthName }}</h3>
                    {% endif %}
                    <canvas id="visitsByLanguageBarChartMonth"></canvas>
                    <div class="flex justify-between pt-1">
                        <a href="{{ monthNavUrls.prevMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Prev month'|t }}</a>
                        <a href="{{ monthNavUrls.nextMonthUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-sm text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Next month'|t }}</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 gap-4 mt-4 p-4 border rounded-lg shadow-sm border-gray-700 bg-gray-800 text-white">
            <div>
                {% set currentDayParam = craft.app.request.getParam('day') %}
                {% set displayDay = currentDayParam ? currentDayParam|date('l, jS F, Y') : (craft.app.language == 'fr' ? 'Aujourd\'hui' : 'Today') %}
                <h3 class="text-xl font-bold mb-2">{{ 'Visits per hour'|t }}: {{ displayDay }} - ({{ totalDailyVisits }})</h3>
                <canvas id="barDayChart"></canvas>
                <div class="flex justify-between pt-1">
                    <a href="{{ dayNavUrls.prevDayUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Prev day'|t }}</a>
                    <a href="{{ dayNavUrls.nextDayUrl }}" class="inline-block bg-gray-700 hover:bg-teal-700 text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline">{{ 'Next day'|t }}</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const languageMap = {{ languageMap|json_encode|raw }};
    if (typeof languageMap === 'undefined') {
        console.error('languageMap is not defined');
        return;
    }

    var totalVisitsPerLanguage = {{ totalVisitsPerLanguage is not null ? totalVisitsPerLanguage|json_encode|raw : 'null' }};
    if (typeof totalVisitsPerLanguage !== 'undefined') {
        const labels = [];
        const data = [];
        const colors = [];

        Object.keys(totalVisitsPerLanguage).forEach(code => {
            if (languageMap[code]) {
                labels.push(languageMap[code].name);
                data.push(totalVisitsPerLanguage[code]);
                colors.push(languageMap[code].hex);
            } else {
                console.error('Language code ' + code + ' does not exist in languageMap');
            }
        });

        const pieCtx = document.getElementById('languagePieChart').getContext('2d');
        new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{ data: data, backgroundColor: colors, borderWidth: 0 }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: true, position: 'left' }
                }
            }
        });
    } else {
        console.log("totalVisitsPerLanguage is not defined");
    }

    const weeklyStats = JSON.parse('{{ lowercaseWeeklyStats|json_encode|raw }}');
    const totalVisitsPerDay = weeklyStats.totalVisitsPerDay;
    const dayLabels = Object.keys(totalVisitsPerDay);

    const lineChartDataset = {
        label: 'Total Plays',
        data: dayLabels.map(day => totalVisitsPerDay[day]),
        backgroundColor: '#27272a',
        borderColor: 'white',
        borderWidth: 2,
        fill: true
    };

    const lineChartCtx = document.getElementById('visitsThisWeekChart').getContext('2d');
    new Chart(lineChartCtx, {
        type: 'line',
        data: {
            labels: dayLabels,
            datasets: [lineChartDataset]
        },
        options: {
            scales: {
                y: { beginAtZero: true }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });

    const languageDayData = weeklyStats.languageDayData;
    let barChartDatasets = [];

    Object.keys(languageMap).forEach(languageCode => {
        let languageData = dayLabels.map(day => languageDayData[day][languageCode] || 0);
        const totalVisitsForLanguage = languageData.reduce((acc, cur) => acc + cur, 0);
        if (totalVisitsForLanguage > 0) {
            barChartDatasets.push({
                label: languageMap[languageCode].name,
                data: languageData,
                backgroundColor: languageMap[languageCode].hex,
                borderColor: languageMap[languageCode].hex,
                borderWidth: 1,
                stack: 'stacked'
            });
        }
    });

    const barChartCtx = document.getElementById('visitsThisWeekLanguageChart').getContext('2d');
    new Chart(barChartCtx, {
        type: 'bar',
        data: {
            labels: dayLabels,
            datasets: barChartDatasets
        },
        options: {
            indexAxis: 'x',
            scales: {
                x: { stacked: true },
                y: { stacked: true }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom'
                }
            }
        }
    });

    const monthlyStatsData = JSON.parse('{{ monthlyStats|json_encode|raw }}');
    const totalVisitsPerWeek = monthlyStatsData.totalVisitsPerWeek;
    const weekLabels = monthlyStatsData.weekLabels;

    const lineChartDatasetMonth = {
        label: 'Total Visits',
        data: weekLabels.map(week => totalVisitsPerWeek[week]),
        backgroundColor: '#27272a',
        borderColor: 'white',
        borderWidth: 2,
        fill: true
    };

    const lineChartCtxMonth = document.getElementById('totalVisitsLineChartMonth').getContext('2d');
    new Chart(lineChartCtxMonth, {
        type: 'line',
        data: {
            labels: weekLabels,
            datasets: [lineChartDatasetMonth]
        },
        options: {
            scales: {
                y: { beginAtZero: true }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });

    const weeklyLanguageVisits = monthlyStatsData.weeklyLanguageVisits;
    let barChartDatasetsMonth = [];

    Object.keys(languageMap).forEach(languageCode => {
        let languageData = weekLabels.map(weekLabel => weeklyLanguageVisits[languageCode][weekLabel] || 0);
        const totalVisitsForLanguage = languageData.reduce((acc, cur) => acc + cur, 0);
        if (totalVisitsForLanguage > 0) {
            barChartDatasetsMonth.push({
                label: languageMap[languageCode].name,
                data: languageData,
                backgroundColor: languageMap[languageCode].hex,
                borderColor: languageMap[languageCode].hex,
                borderWidth: 1,
                stack: 'stacked'
            });
        }
    });

    const barChartCtxMonth = document.getElementById('visitsByLanguageBarChartMonth').getContext('2d');
    new Chart(barChartCtxMonth, {
        type: 'bar',
        data: {
            labels: weekLabels,
            datasets: barChartDatasetsMonth
        },
        options: {
            indexAxis: 'x',
            scales: {
                x: { stacked: true },
                y: { stacked: true }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom'
                }
            }
        }
    });

    const dailyStats = JSON.parse('{{ lowercaseDailyStats|json_encode|raw }}');
    const allLabels = Object.keys(dailyStats);
    const timeSlots = [];
    for (let hour = 8; hour <= 20; hour++) {
        timeSlots.push(`${hour.toString().padStart(2, '0')}:00`);
        timeSlots.push(`${hour.toString().padStart(2, '0')}:30`);
    }

    const filteredLabels = allLabels.filter(label => {
        const hour = parseInt(label.split(':')[0]);
        return hour >= 8 && hour <= 20;
    });

    datasets = [];

    Object.keys(languageMap).forEach(function(languageCode) {
        const languageInfo = languageMap[languageCode];
        const color = languageInfo.hex;
        const dataPoints = timeSlots.map(function(timeSlot) {
            return dailyStats[timeSlot] && dailyStats[timeSlot][languageCode] ? dailyStats[timeSlot][languageCode] : 0;
        });

        if (dataPoints.some(point => point > 0)) {
            datasets.push({
                label: languageInfo.name,
                backgroundColor: color,
                data: dataPoints
            });
        }
    });

    const ctx = document.getElementById('barDayChart').getContext('2d');
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: timeSlots,
            datasets: datasets
        },
        options: {
            scales: {
                x: { stacked: true },
                y: { stacked: true }
            },
            plugins: {
                legend: {
                    display: datasets.length > 1,
                    position: 'bottom'
                }
            }
        }
    });

    const tabs = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            tabs.forEach(t => t.classList.remove('text-blue-600', 'border-blue-600'));
            tabContents.forEach(content => content.classList.add('hidden'));
            tab.classList.add('text-blue-600', 'border-blue-600');
            const activeTabContent = document.getElementById(tab.getAttribute('data-target'));
            activeTabContent.classList.remove('hidden');
        });
    });

    if (tabs.length > 0) {
        tabs[0].click();
    }

    const monthTabs = document.querySelectorAll('.month-tab-button');
    const monthTabContents = document.querySelectorAll('.month-tab-content');

    monthTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            monthTabs.forEach(t => t.classList.remove('text-blue-600', 'border-blue-600'));
            monthTabContents.forEach(content => content.classList.add('hidden'));
            tab.classList.add('text-blue-600', 'border-blue-600');
            const activeTabContent = document.getElementById(tab.getAttribute('data-target'));
            activeTabContent.classList.remove('hidden');
        });
    });

    if (monthTabs.length > 0) {
        monthTabs[0].click();
    }
});
</script>

{% endblock %}
